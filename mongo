1. Install the MongoDB Compass GUI and configure it.

developer@ccfl6-pc50:~$ mongo 172.16.50.34/mca49
MongoDB shell version v4.2.15
connecting to: mongodb://172.16.50.34:27017/mca49?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("816e7fc7-d026-448f-af34-bac1b5f90276") }
MongoDB server version: 8.0.9
WARNING: shell and server versions do not match
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	https://docs.mongodb.com/
Questions? Try the MongoDB Developer Community Forums
	https://community.mongodb.com
Server has startup warnings: 
{"t":{"$date":"2025-05-02T10:36:33.832+05:30"},"s":"I",  "c":"STORAGE",  "id":22297,   "ctx":"initandlisten","msg":"Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem","tags":["startupWarnings"]}

{"t":{"$date":"2025-05-02T10:36:35.922+05:30"},"s":"W",  "c":"CONTROL",  "id":22120,   "ctx":"initandlisten","msg":"Access control is not enabled for the database. Read and write access to data and configuration is unrestricted","tags":["startupWarnings"]}

{"t":{"$date":"2025-05-02T10:36:35.922+05:30"},"s":"W",  "c":"CONTROL",  "id":9068900, "ctx":"initandlisten","msg":"For customers running the current memory allocator, we suggest changing the contents of the following sysfsFile","attr":{"allocator":"tcmalloc-google","sysfsFile":"/sys/kernel/mm/transparent_hugepage/defrag","currentValue":"madvise","desiredValue":"defer+madvise"},"tags":["startupWarnings"]}

{"t":{"$date":"2025-05-02T10:36:35.922+05:30"},"s":"W",  "c":"CONTROL",  "id":8640302, "ctx":"initandlisten","msg":"We suggest setting the contents of sysfsFile to 0.","attr":{"sysfsFile":"/sys/kernel/mm/transparent_hugepage/khugepaged/max_ptes_none","currentValue":511},"tags":["startupWarnings"]}

{"t":{"$date":"2025-05-02T10:36:35.922+05:30"},"s":"W",  "c":"NETWORK",  "id":5123300, "ctx":"initandlisten","msg":"vm.max_map_count is too low","attr":{"currentValue":65530,"recommendedMinimum":102400,"maxConns":51200},"tags":["startupWarnings"]}

{"t":{"$date":"2025-05-02T10:36:35.922+05:30"},"s":"W",  "c":"CONTROL",  "id":8386700, "ctx":"initandlisten","msg":"We suggest setting swappiness to 0 or 1, as swapping can cause performance problems.","attr":{"sysfsFile":"/proc/sys/vm/swappiness","currentValue":60},"tags":["startupWarnings"]}

> db
mca49
> use mca49
switched to db mca49

2. Create a collection student consists of details like rollno, name, phoneno, marks, city,
year of course, score.

> db.createCollection("student")
{ "ok" : 1 }

3. Insert the details of the multiple students (atleast 5) in the form of documents in the
student collection.

> db.student.insertMany([
...   { rollno: 1, name: "Sujith", phoneno: "9876543210", marks: 85, city: "Thrissur", year: 2020, score: 88, joindate: new Date("2020-04-10") },
...   { rollno: 2, name: "Sarayu", phoneno: "9123456780", marks: 95, city: "Thrissur", year: 2020, score: 93, joindate: new Date("2021-06-15") },
...   { rollno: 3, name: "Ajay", phoneno: "9988776655", marks: 76, city: "Ernakulam", year: 2019, score: 80, joindate: new Date("2019-03-10") },
...   { rollno: 4, name: "Divya", phoneno: "9786543211", marks: 91, city: "Thrissur", year: 2022, score: 95, joindate: new Date("2022-07-12") },
...   { rollno: 5, name: "Anil", phoneno: "9871234567", marks: 67, city: "Kochi", year: 2023, score: 70, joindate: new Date("2023-01-05") }
... ])
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("681854ef77fdcb0ee62b6771"),
		ObjectId("681854ef77fdcb0ee62b6772"),
		ObjectId("681854ef77fdcb0ee62b6773"),
		ObjectId("681854ef77fdcb0ee62b6774"),
		ObjectId("681854ef77fdcb0ee62b6775")
	]
}

4. Retrieve the fields rollno, name, phoneno, marks, city for all the documents in the
collection student.

> db.student.find({}, { _id: 0, rollno: 1, name: 1, phoneno: 1, marks: 1, city: 1 })
{ "rollno" : 1, "name" : "Sujith", "phoneno" : "9876543210", "marks" : 85, "city" : "Thrissur" }
{ "rollno" : 2, "name" : "Sarayu", "phoneno" : "9123456780", "marks" : 95, "city" : "Thrissur" }
{ "rollno" : 3, "name" : "Ajay", "phoneno" : "9988776655", "marks" : 76, "city" : "Ernakulam" }
{ "rollno" : 4, "name" : "Divya", "phoneno" : "9786543211", "marks" : 91, "city" : "Thrissur" }
{ "rollno" : 5, "name" : "Anil", "phoneno" : "9871234567", "marks" : 67, "city" : "Kochi" }

5. Display the details of students who achieved a score more than 90 and are from
‘Thrissur’.

> db.student.find({ score: { $gt: 90 }, city: "Thrissur" })
{ "_id" : ObjectId("681854ef77fdcb0ee62b6772"), "rollno" : 2, "name" : "Sarayu", "phoneno" : "9123456780", "marks" : 95, "city" : "Thrissur", "year" : 2020, "score" : 93, "joindate" : ISODate("2021-06-15T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6774"), "rollno" : 4, "name" : "Divya", "phoneno" : "9786543211", "marks" : 91, "city" : "Thrissur", "year" : 2022, "score" : 95, "joindate" : ISODate("2022-07-12T00:00:00Z") }

6. Update the phone number of Sujith in the student collection. Retrieve the updated
information.

> db.student.updateOne({ name: "Sujith" }, { $set: { phoneno: "9999999999" } })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

> db.student.find({ name: "Sujith" })
{ "_id" : ObjectId("681854ef77fdcb0ee62b6771"), "rollno" : 1, "name" : "Sujith", "phoneno" : "9999999999", "marks" : 85, "city" : "Thrissur", "year" : 2020, "score" : 88, "joindate" : ISODate("2020-04-10T00:00:00Z") }

7. Update the year of course in all the documents in the student collection to 2021. Also
retrieve the updated information.

> db.student.updateMany({}, { $set: { year: 2021 } })
{ "acknowledged" : true, "matchedCount" : 5, "modifiedCount" : 5 }
> db.student.find()
{ "_id" : ObjectId("681854ef77fdcb0ee62b6771"), "rollno" : 1, "name" : "Sujith", "phoneno" : "9999999999", "marks" : 85, "city" : "Thrissur", "year" : 2021, "score" : 88, "joindate" : ISODate("2020-04-10T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6772"), "rollno" : 2, "name" : "Sarayu", "phoneno" : "9123456780", "marks" : 95, "city" : "Thrissur", "year" : 2021, "score" : 93, "joindate" : ISODate("2021-06-15T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6773"), "rollno" : 3, "name" : "Ajay", "phoneno" : "9988776655", "marks" : 76, "city" : "Ernakulam", "year" : 2021, "score" : 80, "joindate" : ISODate("2019-03-10T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6774"), "rollno" : 4, "name" : "Divya", "phoneno" : "9786543211", "marks" : 91, "city" : "Thrissur", "year" : 2021, "score" : 95, "joindate" : ISODate("2022-07-12T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6775"), "rollno" : 5, "name" : "Anil", "phoneno" : "9871234567", "marks" : 67, "city" : "Kochi", "year" : 2021, "score" : 70, "joindate" : ISODate("2023-01-05T00:00:00Z") }

8. Display the city of ‘Sarayu’.

> db.student.find({ name: "Sarayu" }, { _id: 0, city: 1 })
{ "city" : "Thrissur" }

9. Retrieve the number of students who joined after May 2020 from the collection.

> db.student.countDocuments({ joindate: { $gt: new Date("2020-05-01") } })
3

10. Arrange the name of the students in ascending order along with all the columns.
> db.student.find().sort({ name: 1 })
{ "_id" : ObjectId("681854ef77fdcb0ee62b6773"), "rollno" : 3, "name" : "Ajay", "phoneno" : "9988776655", "marks" : 76, "city" : "Ernakulam", "year" : 2021, "score" : 80, "joindate" : ISODate("2019-03-10T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6775"), "rollno" : 5, "name" : "Anil", "phoneno" : "9871234567", "marks" : 67, "city" : "Kochi", "year" : 2021, "score" : 70, "joindate" : ISODate("2023-01-05T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6774"), "rollno" : 4, "name" : "Divya", "phoneno" : "9786543211", "marks" : 91, "city" : "Thrissur", "year" : 2021, "score" : 95, "joindate" : ISODate("2022-07-12T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6772"), "rollno" : 2, "name" : "Sarayu", "phoneno" : "9123456780", "marks" : 95, "city" : "Thrissur", "year" : 2021, "score" : 93, "joindate" : ISODate("2021-06-15T00:00:00Z") }
{ "_id" : ObjectId("681854ef77fdcb0ee62b6771"), "rollno" : 1, "name" : "Sujith", "phoneno" : "9999999999", "marks" : 85, "city" : "Thrissur", "year" : 2021, "score" : 88, "joindate" : ISODate("2020-04-10T00:00:00Z") }

11. Rename attribute city as town.
> db.student.updateMany({}, [
...   { $set: { town: "$city" } },
...   { $unset: "city" }
... ])
{ "acknowledged" : true, "matchedCount" : 5, "modifiedCount" : 5 }

12. Delete the details of the student whose name is ‘Sujith’ from the student collection
> db.student.deleteOne({ name: "Sujith" })
{ "acknowledged" : true, "deletedCount" : 1 }
 

